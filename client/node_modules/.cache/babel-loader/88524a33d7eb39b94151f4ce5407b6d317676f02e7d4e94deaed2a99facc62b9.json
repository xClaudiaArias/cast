{"ast":null,"code":"var _jsxFileName = \"/Users/claudiaarias/Documents/ProjectsSummer/cast/src/Context/WeatherContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherContext = /*#__PURE__*/createContext(null);\nconst WeatherContextProvider = props => {\n  _s();\n  const [weather, setWeather] = useState();\n  const [forecast, setForecast] = useState(null);\n  const [city, setCity] = useState('');\n  const [dummyData, setDummyData] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`);\n        const res2 = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`);\n        setWeather(res.data);\n        setForecast(res2.data);\n        console.log(JSON.stringify(res.data));\n      } catch (err) {\n        console.log(\"Failed to get data: \", err.message);\n      }\n    }\n    fetchData();\n  }, [city]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const dummyRes = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=brooklyn&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`);\n        setDummyData(dummyRes.data);\n      } catch (err) {\n        console.log(\"Failed to get data: \", err.message);\n      }\n    }\n    fetchData();\n  }, []);\n  const contextValue = {\n    weather,\n    setCity,\n    forecast,\n    dummyData\n  };\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherContextProvider, \"lTI1+HwrcOiOu1bPRYifFS/1hF0=\");\n_c = WeatherContextProvider;\nexport default WeatherContextProvider;\nvar _c;\n$RefreshReg$(_c, \"WeatherContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","axios","jsxDEV","_jsxDEV","WeatherContext","WeatherContextProvider","props","_s","weather","setWeather","forecast","setForecast","city","setCity","dummyData","setDummyData","fetchData","res","get","res2","data","console","log","JSON","stringify","err","message","dummyRes","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/claudiaarias/Documents/ProjectsSummer/cast/src/Context/WeatherContext.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport const WeatherContext = createContext(null);\n\nconst WeatherContextProvider = (props) => {\n    const [weather, setWeather] = useState();\n    const [forecast, setForecast] = useState(null);\n    const [city, setCity] = useState('');\n    const [dummyData, setDummyData] = useState()\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`);\n                const res2 = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`);\n                setWeather(res.data);\n                setForecast(res2.data);\n                console.log(JSON.stringify(res.data))\n            } catch (err) {\n                console.log(\"Failed to get data: \", err.message)\n            }\n        }\n        fetchData();\n    }, [city])\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const dummyRes = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=brooklyn&appid=eb5bf5cf252dcc79c75fe1ddbad6ceb3`)\n                setDummyData(dummyRes.data)\n            } catch (err) {\n                console.log(\"Failed to get data: \", err.message)\n            }\n        }\n        fetchData();\n    }, [])\n\n\n    const contextValue = {weather, setCity, forecast, dummyData}\n\n    return (\n        <WeatherContext.Provider value={contextValue}>\n            {props.children}\n        </WeatherContext.Provider>\n    )\n}\n\nexport default WeatherContextProvider"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,cAAc,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEjD,MAAMO,sBAAsB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZ,eAAeiB,SAASA,CAAA,EAAG;MACvB,IAAI;QACA,MAAMC,GAAG,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,qDAAoDN,IAAK,yCAAwC,CAAC;QAC/H,MAAMO,IAAI,GAAG,MAAMlB,KAAK,CAACiB,GAAG,CAAE,sDAAqDN,IAAK,yCAAwC,CAAC;QACjIH,UAAU,CAACQ,GAAG,CAACG,IAAI,CAAC;QACpBT,WAAW,CAACQ,IAAI,CAACC,IAAI,CAAC;QACtBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACP,GAAG,CAACG,IAAI,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOK,GAAG,EAAE;QACVJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,GAAG,CAACC,OAAO,CAAC;MACpD;IACJ;IACAV,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEVb,SAAS,CAAC,MAAM;IACZ,eAAeiB,SAASA,CAAA,EAAG;MACvB,IAAI;QACA,MAAMW,QAAQ,GAAG,MAAM1B,KAAK,CAACiB,GAAG,CAAE,mGAAkG,CAAC;QACrIH,YAAY,CAACY,QAAQ,CAACP,IAAI,CAAC;MAC/B,CAAC,CAAC,OAAOK,GAAG,EAAE;QACVJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,GAAG,CAACC,OAAO,CAAC;MACpD;IACJ;IACAV,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMY,YAAY,GAAG;IAACpB,OAAO;IAAEK,OAAO;IAAEH,QAAQ;IAAEI;EAAS,CAAC;EAE5D,oBACIX,OAAA,CAACC,cAAc,CAACyB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAG,QAAA,EACxCzB,KAAK,CAACyB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAElC,CAAC;AAAA5B,EAAA,CAzCKF,sBAAsB;AAAA+B,EAAA,GAAtB/B,sBAAsB;AA2C5B,eAAeA,sBAAsB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}